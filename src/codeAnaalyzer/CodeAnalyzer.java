/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codeAnaalyzer;

/**
 *
 * @author Любомир
 */

import java.util.StringTokenizer;
import java.util.*;
import java.util.List;
import javax.swing.*;//for showmessage
import java.io.*;
import static java.lang.System.exit;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.*;
import java.io.File;


public class CodeAnalyzer extends javax.swing.JFrame {

    /**
     * Creates new form GUI_test
     */
    public CodeAnalyzer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);

        jLabel1.setText("введіть число в поле справа");

        jButton1.setText("перевірка на парність");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        jButton2.setText("Обчислити");
        jButton2.setToolTipText("запуск процесу обчислення слів у тексті, що відображений в полі вище");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel2.setText(".");

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jButton3.setText("Результати");
        jButton3.setToolTipText("натисніть для виводу результатів обчислень");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Враховувати коментарі");

        jButton4.setText("Пакетна обробка...");
        jButton4.setToolTipText("обчислення слів у декількох файлах");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane2.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea4.setRows(5);
        jScrollPane5.setViewportView(jTextArea4);

        jLabel3.setText("Текст:");

        jLabel4.setText("Слова");

        jLabel5.setText("Символи");

        fileMenu.setMnemonic('f');
        fileMenu.setText("Файл");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Відкрити");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Зберегти");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Зберегти як ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        jMenuItem4.setText("Показати результати");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        jMenuItem1.setText("Зберегти результати");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setText("Завантажити результати");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Вийти");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Редагування");

        jMenuItem5.setText("Обробка результатів");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem5);

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Вирізати");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Копіювати");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Вставити");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Видалити");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        jMenuItem3.setText("Очистити пам'ять");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem3);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Допомога");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Довідка");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Про програму");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton4)
                                                .addGap(171, 171, 171)
                                                .addComponent(jButton3))
                                            .addComponent(jCheckBox1)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(5, 5, 5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(16, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // Перевірка чисел на парність
        int Parity_check = Integer.parseInt(jTextPane1.getText());
        String CheckResult = Parity_check%2==0?"Це парне число":"Це непарне число";
        jLabel1.setText(CheckResult);
        //JOptionPane.showMessageDialog(null, "Ви ввели число: "+Parity_check+"\n Це "+CheckResult);
//        word.add(CheckResult);
//        String tt = word.get(0)+"("+word.size();
//        JOptionPane.showMessageDialog(rootPane, tt);
    }//GEN-LAST:event_jButton1MouseClicked

//    int Vocabulary_size = 1000;
//    String Vocabulary[] = new String[Vocabulary_size];
    //int word_used[] = new int[Vocabulary_size];
    int wordscount = 0;
    int charscount = 0;
    List<String> word = new ArrayList<String>();
    List<Integer> word_used = new ArrayList<Integer>();
    List<String> wordStat = new ArrayList<String>();
    
    List<Character> character = new ArrayList<Character>();
    List<Integer> character_used = new ArrayList<Integer>();
    List<String> charStat = new ArrayList<String>();
    //String charset = "Shift-JIS";
    String charset = "UTF-8";
    String dataDIR = "data\\";
    
    public int loadresult(String folder)
    {
        String filepath = dataDIR + folder + "\\" + "words.txt";
        
        try{
            FileInputStream fis = new FileInputStream(filepath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));
            while(br.ready())
            {                
                word.add(br.readLine());
            }
            br.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "words_counter.txt";
        try{
            FileInputStream fis = new FileInputStream(filepath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));
            while(br.ready())
            {
                word_used.add(Integer.parseInt(br.readLine()));
            }
            br.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "words_analyzed.txt";
        try{
            FileInputStream fis = new FileInputStream(filepath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));           
            wordscount = Integer.parseInt(br.readLine());
            charscount = Integer.parseInt(br.readLine());
            br.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        
        filepath = dataDIR + folder + "\\" + "chars.txt";
        try{
            FileInputStream fis = new FileInputStream(filepath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));
            while(br.ready())
            {                
                character.add(br.readLine().charAt(0));
            }
            br.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "chars_count.txt";
        try{
            FileInputStream fis = new FileInputStream(filepath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));
            while(br.ready())
            {                
                character_used.add(Integer.parseInt(br.readLine()));
            }
            br.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        
        System.out.println("Successfully loaded from: "+folder);
        return 1;
    }
    
    public int saveresult(String folder)
    {
        File foldername = new File(dataDIR+folder);
        foldername.mkdir();
        String charset = "UTF-16BE";
        String filepath = dataDIR + folder + "\\" + "words.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < word.size(); i++)
            {
                bw.write(word.get(i));
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "words_counter.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < word.size(); i++)
            {
                int value = word_used.get(i);
                String write = String.valueOf(value);
                bw.write(write);    
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" +"words_analyzed.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));            
            bw.write(String.valueOf(wordscount)); 
            bw.newLine();
            bw.write(String.valueOf(charscount));
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        
        filepath = dataDIR + folder + "\\" + "chars.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < character.size(); i++)
            {
                bw.write(character.get(i).toString());
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "chars_count.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < character_used.size(); i++)
            {
                int value = character_used.get(i);
                String write = String.valueOf(value);
                bw.write(write);    
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "wordStatistic.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < wordStat.size(); i++)
            {
                bw.write(wordStat.get(i));
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        filepath = dataDIR + folder + "\\" + "characterStatistic.txt";
        try{
            FileOutputStream fos = new FileOutputStream(filepath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
            for(int i = 0; i < charStat.size(); i++)
            {
                bw.write(charStat.get(i));
                bw.newLine();
            }
            bw.close();
        }catch(FileNotFoundException e){System.out.println("File not found"+filepath);}
         catch(IOException e){System.out.println("I/O error: "+filepath);}
        System.out.println("Successfully written to: "+folder);
        return 1;
    }
    
    public int write_to_voc(String s)//записує слово до словника
    {
        word.add(s);
        word_used.add(1);
        wordscount++;
        return 0;        
    }
    
    public int write_to_voc_char(char s)//записує слово до словника
    {
        character.add(s);
        character_used.add(1);
        //wordscount++;
        return 0;        
    }
    
    private int comparerChar(char s)// функція виявлення нових букв  
    {                           //і збільшення індексу, якщо така буква вже зустрічалось       
                
        if (character.isEmpty())
        {             
            write_to_voc_char(s);            
            return 1;
        }
        else
        {    
            for (int i = 0; i < character.size(); i++)
            {                
                if (character.get(i).equals(s))
                {
                    //слово вже є в словнику, додати до лічильника 1 і вийти                   
                    int index = (int)character_used.get(i)+1;
                    character_used.set(i, index);           
                    return 0;                    
                }
                else
                {
                    if(i == character.size() - 1)//список пройдено, збігів не знайдено
                    {
                        //додаємо слово до списку
                        write_to_voc_char(s);                       
                        return 1;
                    }
                }
            }
        }
        return 0;
    }
    
    private int comparer(String s)// функція виявлення нових слів  
    {                           //і збільшення індексу, якщо таке слово вже зустрічалось
        //StringTokenizer str = new StringTokenizer(s);
        charscount += s.length();
        for(int i = 0; i < s.length(); i++)
        {
            comparerChar(s.charAt(i));
        }
        if (word.isEmpty())
        { 
            //JOptionPane.showMessageDialog(null, "if word.isEmpty");
            write_to_voc(s);            
            return 1;
        }
        else
        {    
            for (int i = 0; i < word.size(); i++)
            {                
                if (word.get(i).equals(s))
                {
                    //слово вже є в словнику, додати до лічильника 1 і вийти                   
                    int index = (int)word_used.get(i)+1;
                    word_used.set(i, index);                    
                    wordscount++;
                    return 0;                    
                }
                else
                {
                    if(i == word.size() - 1)//список пройдено, збігів не знайдено
                    {
                        //додаємо слово до списку
                        write_to_voc(s);                       
                        return 1;
                    }
                }
            }
        }
        return 0;
    }
   // КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ
    // КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ
    /* КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ
     КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ КОМЕНТАРІ*/
    private int find(String text, String ignored_chars, int type)//пошук слів і операторів
    {
        if (text.isEmpty()) return 0;
        StringTokenizer str = new StringTokenizer(text);//пошук
       // int index = 0;
        //if (!(str.hasMoreTokens())) return 0;
        while(str.hasMoreTokens()){
//            double percent = (index++)/(str.countTokens()/100.0);
//                String statusBar = Double.toString(percent);                
//                System.out.println("Token analysis status: "+statusBar);
//                jProgressBar1.setString(statusBar);
//                rootPane.updateUI();                
//                jProgressBar1.updateUI();
            String s;
            //if (str.nextToken(ignored_chars).isEmpty()) return 0;
            try{
            s = str.nextToken(ignored_chars);
            
            //виклик функції порівняння
            //тип визначає символи для аналізу - 1 для літер і 0 для інших символів
            if (type==1) comparer(s);
            if (type==0){
                //char[] sign = {'(',')','{','}','[',']',';','.','|'};
                for(int i=0; i < s.length();i++)//шукаємо дужки та інші парні символи
                {
//                    if (s.charAt(i)=='\t'){
//                        s = s.substring(i, i+1);
//                    }
                    if((s.charAt(i)=='(')||(s.charAt(i)==')')||(s.charAt(i)==';')
                            ||(s.charAt(i)=='{')||(s.charAt(i)=='}')||(s.charAt(i)==',')
                            ||(s.charAt(i)==':')||(s.charAt(i)=='*')||(s.charAt(i)=='\'')
                            ||(s.charAt(i)=='\"')||(s.charAt(i)=='<')||(s.charAt(i)=='>')
                            ||(s.charAt(i)=='[')||(s.charAt(i)==']')||(s.charAt(i)=='+')
                            ||(s.charAt(i)=='-')||(s.charAt(i)=='{')||(s.charAt(i)=='}')
                            ||(s.charAt(i)=='^')||(s.charAt(i)=='&')||(s.charAt(i)=='=')
                            ||(s.charAt(i)=='|')||(s.charAt(i)=='%')||(s.charAt(i)=='#')
                            ||(s.charAt(i)=='.')||(s.charAt(i)==',')||(s.charAt(i)=='!')
                            ||(s.charAt(i)=='\t')||(s.charAt(i)=='\n'))
                    {                
                        //words_in_voc = i;                    
                        String character = s.substring(i, i+1);
                        if (!(character.isEmpty())){
                            comparer(character);
                            //int index = word_used.get(i) + 1;
                            //word_used.set(word.indexOf(s.substring(i, i+1)), index);
                            //System.out.println(s.substring(i, i+1));                    
                            //return 1; 
                        }
                    }
                    else
                    {
                        if (i == s.length()-1) {
                            s = s.replace('(',' ');
                            s = s.replace(')',' ');
                            s = s.replace(';',' ');
                            //s = s.replace(':',' ');                        
                            s = s.trim();
                            comparer(s);
                        }                        
                    }                          
                } 
            }
            }catch (Exception e){System.out.println("Помилка при відсіюванні групи: "+ignored_chars);}
            //System.out.println(word);  //debug          
            }
        return 1;
    }

    private int printresult()
    {
        String info = ""; //int words_in_voc = 0;
       // jTable1.firePropertyChange(rowCount, 10, word.size());     
        System.out.println("Preparing result.... ");
        for (int i=0; i < word.size();i++)
        {             
            info += " " + word.get(i) + "  " + word_used.get(i) + " \n";
            double percent = (i+1)/(word.size()/100.0);
            String statusBar = Double.toString(percent);
            System.out.println(statusBar+"% of results ready");
        }
        jTextArea2.setText(info);
        info = "";
        for (int i=0; i < character.size();i++)
        {             
            info += " " + character.get(i) + "  " + character_used.get(i) + " \n";
            
        }
        jTextArea4.setText(info);
        //JOptionPane.showMessageDialog(null, info);
        String message = "Всього слів у тексті: "+wordscount+". Всього символів: "+charscount+".\n "
                + "Унікальних слів: "+ word.size();
        jLabel2.setText(message);
        return 1;
    }
    
    public int analyze(String text)
    {
        //String text = JOptionPane.showInputDialog("Введіть текст");
        String chars = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                + "абвгґдеєжзиіїйклмнопрстуфхцчшщьюяАБВГҐДЕЄЖЗИІЇКЛМНОПРСТУФХЦЧШЩЬЮЯ"
                + "1234567890~_Ⓡ    \n\t";
        String sign = " .,;:!?+=*-~`  {(//<[]>)}\"\'|&\n\t  \\    ";
        
//        String sign1 = chars + " .,;:!?+=*-%^@$  //\"\'|&\n\t  \\    ";
//        String sign2 = chars + "    {(//<[\\ ";
//        String sign3 = chars + "    ]>)} ";
        
        String figure_bracket1 = chars + "} .,;:!?+=*-(//<[]>)\"\'|&\n\t  \\  ";
        String figure_bracket2 = chars + "{ .,;:!?+=*-(//<[]>)\"\'|&\n\t  \\  ";
        
        String bracket1 = chars + ") .,;:!?+=*-{}//<>[]\"\'|&\n\t  \\ ";
        String bracket2 = chars + "( .,;:!?+=*-{}//<>[]\"\'|&\n\t  \\ ";
        
        
        String square_bracket1 = chars + "[ ,.;:!?+=*-{}()//<>\"\'|&\n\t  \\  ";
        String square_bracket2 = chars + "] ,.;:!?+=*-{}()//<>\"\'|&\n\t  \\  ";
        
        String moreThan = chars + "> ,.;:!?+=*-{}()//[]\"\'|&\n\t  \\ ";
        String lessThan = chars + "< ,.;:!?+=*-{}()//[]\"\'|&\n\t  \\ ";
        
        String doubleQuotes = chars + " ,.;:!?+=*-{}()//[]<>\'|&\n\t  \\  ";
        String quotes = chars + " ,.;:!?+=*-{}()//[]<>\"|&\n\t  \\    ";
        
        String semicolon = chars + " .,:!?+=*-{}()//[]<>\"\'|&\n\t  \\    ";
        String comma = chars + " .;:!?+=*-{}()[]//<>\"\'|&\n\t  \\    ";
        String dot = chars + " ,;:!?+=*-{}()[]//<>\"\'|&\n\t  \\  ";
        
        String double_dot = chars + " .,;!?+=*-{}()//<>[]\"\'|&\n\t  \\   ";
        String multiply = chars + " .,;:!?+=-{}()//<>[]\"\'|&\n\t  \\ ";
        String plus = chars + " .,;:!?=*-{}()//<>[]\"\'|&\n\t  \\ ";
        String minus = chars + " .,;:!?+=*{}()//<>[]\"\'|&\n\t  \\    ";
        String equal = chars + " .,;:!?-+*{}()//<>[]\"\'|&\n \t \\    ";
        String sign_OR = chars + " .,;:!?=-+*{}()//<>[]\"\'&\n\t \\  ";
        
        String exclamationMark = chars + " ,.;:?+=*-{}()[]//<>\"\'|&\n\t  \\  ";
        String questionMark = chars + " ,.;:!+=*-{}()[]//<>\"\'|&\n\t  \\ ";

        String[] destinationChars = {figure_bracket1, figure_bracket2, 
        bracket1, bracket2, square_bracket1, square_bracket2, moreThan,
        lessThan, doubleQuotes, quotes, semicolon, comma, dot, double_dot,
        multiply, plus, minus, equal, sign_OR, exclamationMark, questionMark};
        //String[] destinationChars1 = {chars, sign1, sign2, sign3};
        if (text.isEmpty()) {
        //JOptionPane.showMessageDialog(rootPane, "Текстове поле порожнє!","Помилка",ERROR_MESSAGE);
            System.out.println("empty field found");
        }
        else
        if (!(jCheckBox1.isSelected()))//команда для відсіювання коментарів у коді
        {
            String temp = ""; int beginIndex = 0; int endIndex = 0;
            int is_comment = 0;
            String filtered_text = "";
            for (int i = 0; i < text.length(); i++)
            {
                if (text.charAt(i)=='\n')
                {
                    endIndex = i;
                    temp = text.substring(beginIndex, endIndex);
                    //<editor-fold defaultstate="collapsed" desc=" пошук входжень символів коментарів - не працює ">
/**
 *          пошук входжень символів коментарів - не працює                    
 *                   int index_un = temp.indexOf("//");
 *                  int index_m = temp.indexOf("/*");
 *                    int index_endm = temp.indexOf("*");
 *                    if ((index_m >= 0)&&(index_endm >= 0))
 *                    {
 *                        filtered_text += temp.substring(0,index_m) + temp.substring(index_endm, temp.length());                        
 *                    }
 *                    if (index_un >= 0)
 *                    {                            
 *                        filtered_text += temp.substring(0, index_un);
 *                        break;
 *                    }
 *                    if(index_m >= 0)
 *                    {
 *                        is_comment = 1;                            
 *                        filtered_text += temp.substring(0, index_m);
 *                        break;
 *                    }
 *                    if(index_endm >= 0)
 *                    {
 *                        is_comment = 0;                            
 *                        filtered_text += temp.substring(index_endm, temp.length());
 *                        break;
 *                    }
 *                    else 
 *
 */
                    //</editor-fold>
                    
                    //комент
                    for(int j = 0; j < temp.length(); j++)
                    {
                        if (j < temp.length()-2){
                            if((is_comment == 0)&&(temp.charAt(j)=='/')&&(temp.charAt(j+1)=='*'))//починається багаторядковий коментар
                            {
                                is_comment = 1;
                                temp = temp.substring(0,j);
                                continue;
                            }
                            if((is_comment == 1)&&(temp.charAt(j)=='*')&&(temp.charAt(j+1)=='/'))//а тут він закінчується
                            {
                                is_comment = 0;
                                temp = temp.substring(j,temp.length());
                                continue;
                            }
                            if((temp.charAt(j)=='/')&&(temp.charAt(j+1)=='/'))//однорядковий коментар
                            {                                
                                temp = temp.substring(0,j);
                                break;
                            }
                            if (temp.charAt(j)=='\n') {
                            filtered_text += temp;
                            temp = "";
                            break;
                            }
                        }
                    }                    
                    filtered_text += temp;
                    beginIndex = endIndex;
                }                
            }
            text = filtered_text;  
        }        
        find(text,sign,1);
        for (int i = 0; i < destinationChars.length; i++)
        {
            find(text, destinationChars[i], 0);
        }
        //find(text,chars,0);

//        find(text,figure_bracket1,0);
//        find(text,figure_bracket2,0);
//
//        find(text,bracket1,0);
//        find(text,bracket2,0);
//
//        find(text,semicolon,0);
//        find(text,comma,0);
//        find(text,dot,0);
//        find(text,square_bracket1,0);
//        find(text,square_bracket2,0);
    //        find(text,sign_OR,0);     
        return 1;
    }
    
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        String text = jTextArea1.getText();
        analyze(text);
    }//GEN-LAST:event_jButton2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        saveresult(JOptionPane.showInputDialog(rootPane, "Введіть назву ", "Очікування на ввід", INFORMATION_MESSAGE));    
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
     // TODO add your handling code here:
            loadresult(JOptionPane.showInputDialog(rootPane, "Введіть назву ", "Очікування на ввід", INFORMATION_MESSAGE));     
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        printresult();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        // TODO add your handling code here:
        jTextArea1.paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        // TODO add your handling code here:
        jTextArea1.copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        // TODO add your handling code here:
        jTextArea1.cut();
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        String about = "Програма для підрахунку слів та літер у текстах і сирцевих кодах програм"+
                "\n Ⓡ автор Любомир Федевич. 2014.";
        JOptionPane.showMessageDialog(rootPane, about, "Про програму", INFORMATION_MESSAGE);        
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        String fromFile = "";
        //!!!!fileDialog
        jTextArea1.setText(fromFile);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int fileCount = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Введіть кількість файлів", "Очікування вводу", INFORMATION_MESSAGE));
        String folder = "C:\\temp\\SourceFilesForAnalyze\\";
        //String status = "Проаналізовано файли: \n";
        
        jProgressBar1.setMaximum(fileCount);
        for(int i = 0; i < fileCount; i++)
        {
            String filename = Integer.toString(i) + ".txt";
            String filepath = folder + filename;
            String fileContents = "";
            try{
                FileInputStream fis = new FileInputStream(filepath);
                BufferedReader br = new BufferedReader(new InputStreamReader(fis,charset));
                while(br.ready())
                {                
                    fileContents += br.readLine() + "\n";
                    
                }
                br.close();
                analyze(fileContents);
                //status += filename + "\n";
                //jTextArea3.setText(status);
                
            }catch(FileNotFoundException e){System.out.println("Файл не знайдено: "+filepath);}
             catch(IOException e){System.out.println("Помилка вводу/виводу: "+filepath);}
            finally{
                double percent = (i+1)/(fileCount/100.0);
                String statusBar = Double.toString(percent);
                System.out.println(statusBar+"% done. " + "Analyzed file: " + filepath);
                jProgressBar1.setValue(i+1);
                jProgressBar1.setString(statusBar);
                rootPane.updateUI();                
                jProgressBar1.updateUI();
            }
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        word.clear();
        word_used.clear();
        character.clear();
        character_used.clear();
        charscount = 0;
        wordscount = 0;
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        printresult();
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    public int searchMax(List<Integer> IntArrayList)
    {
        int max = 1;
        for (int i = 0; i < IntArrayList.size(); i++)
        {
            if (max < IntArrayList.get(i)) max = IntArrayList.get(i);
        }
        return max;
    }
    
    public int[] BubbleSort(int[] a)
    {
        System.out.println("working in sort()...");
        /* Внешний цикл постоянно сужает фрагмент массива,
            * который будет рассматриваться, ведь после каждого прохода
            * внутреннего цикла на последнем месте фрагмента будет
            * оказываться нужный элемент (его не надо рассматривать снова).
            */
           for (int i = a.length - 1; i >= 2; i--) {
               /* В переменной sorted мы будем хранить признак того,
                * отсортирован ли массив. Перед каждым проходом внутреннего
                * цкла будем предполагать, что отсортирован, но если совершим
                * хоть одну перестановку, то значит ещё не конца отсортирован.
                * Этот приём, упрощающий сортировку, называется критерием Айверсона.
                */
               boolean sorted = true;
               /* Во внутреннем цикле мы проходимся по фрагменту массива, который
                * определяется внешним циклом. В этом фрагменте мы устанавливаем
                * правильный порядок между соседними элементами, так попарно
                * обрабатывая весь фрагмент.
                */
               for (int j = 0; j < i; j++) {
                   /* Если порядок соседних элементов не правильный, то их
                    * надо обменять местами. И запомнить, что была перестановка.
                    */
                   if (a[j] < a[j+1]) {
                       int temp = a[j];
                       a[j] = a[j+1];
                       a[j+1] = temp;
                       sorted = false;
                   }
               }
               /* Если массив отсортирован (т.е. не было ни одной перестановки
                * во внутреннем цикле, значит можно прекращать работу внешнего
                * цикла.
                */
               if(sorted) {
                   break;
               }
               System.out.println(Integer.toString(a.length - i)+"/"+Integer.toString(a.length));
           }
        return a;    
    }
    
    public int[] valuesW;
    public int[] valuesC;
    
    private void getValues(int[] a, int type)
    {
        List<Integer> values = new ArrayList<Integer>();
        values.add(a[0]);
        for(int i = 1; i < a.length; i++)
        {
            if (a[i] == a[i-1]) continue;
            else values.add(a[i]);
        }
        int[] res = new int[values.size()];
        for(int i = 1; i < values.size(); i++)
        {
            res[i] = values.get(i);
        }
        if (type == 1) {
            valuesW = new int[res.length];
            valuesW = res;
        }
        if (type == 2) {
            valuesC = new int[res.length];
            valuesC = res;
        }        
    }
    
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        List<String> wordSort = new ArrayList<String>();
        List<Integer> word_used_Sort = new ArrayList<Integer>();       
        //сортування по кількості
        //int maxElement = searchMax(word_used);
        int[] elements = new int[word_used.size()];
        for (int i = 0; i < word_used.size(); i++)
        {
            elements[i] = word_used.get(i);
        }
        elements = BubbleSort(elements);
        getValues(elements,1);
        int index = 0;
        for (int j : valuesW)
        {
            int counter = 0;
            for (int i = 0; i < word.size(); i++)
            {
                if (word_used.get(i) == j)
                {
                    wordSort.add(word.get(i));
                    word_used_Sort.add(word_used.get(i));
                    counter++;
                }
            }
            index++;
            double percent = (index)/(valuesW.length/100.0);
            String statusBar = Double.toString(percent);
            System.out.println(statusBar+"% of sorted words are ready");
            if (counter != 0)
            wordStat.add(Integer.toString(j)+"    "+Integer.toString(counter));
        }
        word = wordSort;
        word_used = word_used_Sort;
        List<Character> characterSort = new ArrayList<Character>();
        List<Integer> character_used_Sort = new ArrayList<Integer>();       
        //сортування по кількості
        //maxElement = searchMax(character_used);
        
        int[] elementsChar = new int[character_used.size()];
        for (int i = 0; i < character_used.size(); i++)
        {
            elementsChar[i] = character_used.get(i);
        }
        elementsChar = BubbleSort(elementsChar);
        getValues(elements,2);
        index = 0;
        for (int j : valuesC)
        {
            int counter = 0;
            for (int i = 0; i < character.size(); i++)
            {
                if (character_used.get(i) == j)
                {
                    characterSort.add(character.get(i));
                    character_used_Sort.add(character_used.get(i));
                    counter++;
                }
            }
            index++;
            double percent = (index)/(valuesC.length/100.0);
            String statusBar = Double.toString(percent);
            System.out.println(statusBar+"% of sorted characters are ready");
            if (counter != 0)
            charStat.add(Integer.toString(j)+"    "+Integer.toString(counter));
        }        
        character = characterSort;
        character_used = character_used_Sort;
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeAnalyzer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
